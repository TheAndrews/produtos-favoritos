// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "produtos-favoritos/src/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// CustomerQuerier is an autogenerated mock type for the CustomerQuerier type
type CustomerQuerier struct {
	mock.Mock
}

// Create provides a mock function with given fields: customer
func (_m *CustomerQuerier) Create(customer *models.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *CustomerQuerier) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *CustomerQuerier) GetByID(id string) (*models.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with no fields
func (_m *CustomerQuerier) List() ([]models.Customer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: customer
func (_m *CustomerQuerier) Update(customer *models.Customer) (*models.Customer, error) {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Customer) (*models.Customer, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(*models.Customer) *models.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCustomerQuerier creates a new instance of CustomerQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerQuerier {
	mock := &CustomerQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
