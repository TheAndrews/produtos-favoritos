// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "produtos-favoritos/src/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductServicer is an autogenerated mock type for the ProductServicer type
type ProductServicer struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: productID
func (_m *ProductServicer) GetProductByID(productID int32) (*models.Product, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*models.Product, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(int32) *models.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with no fields
func (_m *ProductServicer) GetProducts() ([]models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductServicer creates a new instance of ProductServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServicer {
	mock := &ProductServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
