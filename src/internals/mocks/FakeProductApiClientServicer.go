// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FakeProductApiClientServicer is an autogenerated mock type for the FakeProductApiClientServicer type
type FakeProductApiClientServicer struct {
	mock.Mock
}

// GetProduct provides a mock function with given fields: productID
func (_m *FakeProductApiClientServicer) GetProduct(productID int32) ([]byte, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]byte, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(int32) []byte); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with no fields
func (_m *FakeProductApiClientServicer) ListProducts() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFakeProductApiClientServicer creates a new instance of FakeProductApiClientServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeProductApiClientServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeProductApiClientServicer {
	mock := &FakeProductApiClientServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
